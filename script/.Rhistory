}
}
d$Kr <- erodibility(vfsand=d$vfsand, om=d$som, clay=d$clay, sand=sum(d$csand, d$msand, d$fsand, d$vfsand))
print(d$Kr)
library(readr)
library(lubridate)
library(ggplot2)
library(hydrostats)
runoff <- read_table2("../data/U1H005_daily.txt",
col_types = cols(DATE = col_integer()),
skip = 10)
head(runoff, 3)
runoff[is.na(runoff$QUAL),2] <- NA # remove Quality measures that shifted in the Q column
runoff <- ts.format(runoff, format="%Y%m%d", cols=c(1,2)) # set date format
runoff$year <- as.integer(substr(runoff$Date, 1,4)) # derive year
runoff$doy <- as.numeric(strftime(runoff$Date, format = "%j"))  # derive day-of-year
runoff$month <- as.numeric(strftime(runoff$Date, format = "%m"))  # derive day-of-year
runoff <- na.omit(runoff) # delete empty fields
head(runoff, 3)
ggplot(runoff, aes(x=Date, y=Q)) +
ylim(0, 400) +
ylab("Q [m³/s]") +
geom_line(aes(group=1), colour="blue", size=.5) +
facet_wrap(runoff$year, ncol=10, scales="free_x") +
scale_x_datetime(date_breaks = "1 month", minor_breaks=NULL) +
theme_bw() +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(),
strip.text.x = element_text(size = 6))
runoff$Qlog <- log10(runoff$Q)  # calculate Log base 10 of runoff
runoff <- runoff[!(runoff$Qlog=='-Inf'),] # delete -Inf
head(runoff,3)
# Density of logarithmic runoff (per doy)
ggplot(runoff, aes(x=doy,y=Qlog)) +
geom_bin2d(binwidth=c(10,0.1)) +
labs(x="Day of year", y="Log Q [m³/s]", title="Observed runoff Mkomazi (U1H005)") +
ylim(-2,3) +
theme_bw()
#ggplot(runoff, aes(Q))+
ggplot(subset(runoff, doy %in% c(1, 183)), aes(Q, group=doy, colour=factor(doy), fill=factor(doy)))+
geom_density(aes(Q, group=doy, colour=factor(doy), fill=factor(doy)),adjust=3, alpha=0.5) +
geom_rug()+
scale_x_log10(limits=c(1,1000))+
#scale_x_continuous(trans='log10')+
scale_fill_discrete(name="Day of year",
breaks=c(1,183),
labels=c("Jan 1st", "Jul 1st")) +
scale_colour_discrete(name="Day of year",
breaks=c(1,183),
labels=c("Jan 1st", "Jul 1st")) +
labs(title="Runoff density for selected days", x="Q [m³/s]", caption="n=59 years") +
theme_bw()
library(ggridges)
library(viridis)
ggplot(runoff, aes(x=Q, y=as.factor(month), fill=as.factor(month)))+
geom_density_ridges_gradient(rel_min_height = 0.05)+
scale_x_log10(limits=c(0.1,1000))+
scale_fill_discrete(name="Month",
breaks=seq(1,12),
guide=F) +
#scale_x_continuous(trans='log10')+
labs(title="Monthly runoff density", x="Q [m³/s]", y="month", caption="n=59 years") +
theme_bw()
#ggplot(runoff, aes(Q))+
ggplot(subset(runoff, doy %in% c(1, 183)), aes(Q, group=doy, colour=factor(doy), fill=factor(doy)))+
geom_density(aes(Q, group=doy, colour=factor(doy), fill=factor(doy)),adjust=3, alpha=0.5) +
geom_rug()+
scale_x_log10(limits=c(1,1000))+
#scale_x_continuous(trans='log10')+
scale_fill_discrete(name="Day of year",
breaks=c(1,183),
labels=c("Jan 1st", "Jul 1st")) +
scale_colour_discrete(name="Day of year",
breaks=c(1,183),
labels=c("Jan 1st", "Jul 1st")) +
labs(title="Runoff density for selected days", x="Q [m³/s]", caption="n=20589 obs.") +
theme_bw()
library(ggridges)
library(viridis)
ggplot(runoff, aes(x=Q, y=as.factor(month), fill=as.factor(month)))+
geom_density_ridges_gradient(rel_min_height = 0.05)+
scale_x_log10(limits=c(0.1,1000))+
scale_fill_discrete(name="Month",
breaks=seq(1,12),
guide=F) +
#scale_x_continuous(trans='log10')+
labs(title="Monthly runoff density", x="Q [m³/s]", y="month", caption="n=59 years") +
theme_bw()
#Furthermore, we conduct a Shapiro-Wilk test toconfirm our observation statistically. We excpect (H0), that the logarithmic discharge is normally distributed.
for(i in unique(runoff$doy)){
if(shapiro.test(runoff$Qlog[runoff$doy==i])$p.value <= 0.01){
print(shapiro.test(runoff$Qlog[runoff$doy==i])$p.value)
}
}
for(i in unique(runoff$doy)){
if(shapiro.test(runoff$Qlog[runoff$doy==i])$p.value <= 0.01){
print(shapiro.test(runoff$Qlog[runoff$doy==i])$p.value)
}
}
swtest <- as.data.frame(matrix(unlist(
with(runoff, tapply(Qlog, doy, shapiro.test))
), ncol=4,byrow=T))
View(swtest)
runoff2 <- runoff
View(runoff2)
swtest <- as.data.frame(matrix(unlist(
with(runoff2, tapply(Qlog, month, shapiro.test))
), ncol=4,byrow=T))
View(swtest)
runoff2 <- runoff
swtest <- as.data.frame(matrix(unlist(
with(runoff2, tapply(Qlog, doy, shapiro.test))
), ncol=4,byrow=T))
runoff2 <- runoff
swtest <- as.data.frame(matrix(unlist(
with(runoff2, tapply(Qlog, doy, shapiro.test))
), ncol=4,byrow=T))
runoff2 <- runoff
swtest <- as.data.frame(matrix(unlist(
with(runoff2, tapply(Qlog, doy, shapiro.test))
), ncol=4,byrow=T))
swtest <- as.data.frame(matrix(unlist(
with(runoff2, tapply(Qlog, doy, ks.test))
), ncol=4,byrow=T))
ks.test(x=runoff, y=pnorm)
ks.test(x=runoff, y='pnorm')
ks.test(x=runoff$Qlog, y='pnorm')
for(i in unique(runoff$doy)){
if(ks.test(x=runoff$Qlog[runoff$doy==i],y='pnorm')$p.value <= 0.01){
print(ks.test(x=runoff$Qlog[runoff$doy==i], y='pnorm')$p.value)
}
}
swtest <- as.data.frame(matrix(unlist(
with(runoff2, tapply(Qlog, doy, shapiro.test))
), ncol=4,byrow=T))
View(swtest)
ggplot(data=swtest, aes(x=as.numeric(V3))) +
geom_bar()
ggplot(data=swtest, aes(x=V1, y=as.numeric(V3))) +
geom_bar()
ggplot(data=swtest, aes(x=V1, y=as.numeric(V3))) +
geom_bar()
ggplot(data=swtest, aes(x='V1', y=as.numeric('V3'))) +
geom_bar()
ggplot(data=swtest, aes(x=swtest$V1, y=as.numeric(V2))) +
geom_bar()
ggplot(data=swtest, aes(x=swtest$V1, y=as.numeric(swtest$V2))) +
geom_bar()
ggplot(data=swtest, aes(x=swtest$V1, y=as.numeric(swtest$V2))) +
geom_histogram()
ggplot(data=swtest, aes(x=swtest$V1, y=as.numeric(swtest$V2))) +
geom_point()
ggplot(data=swtest, aes(y=as.numeric(swtest$V2))) +
geom_point()
ggplot(data=swtest, aes(x=ncol(swtest), y=as.numeric(swtest$V2))) +
geom_point()
ggplot(data=swtest, aes(x=ncol(swtest$V1), y=as.numeric(swtest$V2))) +
geom_point()
ggplot(data=swtest, aes(x=row(swtest$V1), y=as.numeric(swtest$V2))) +
geom_point()
ggplot(data=swtest, aes(x=nrow(swtest$V1), y=as.numeric(swtest$V2))) +
geom_point()
ggplot(data=swtest, aes(x=nrow(swtest), y=as.numeric(swtest$V2))) +
geom_point()
ggplot(data=swtest, aes(x=row(swtest), y=as.numeric(swtest$V2))) +
geom_point()
ggplot(data=swtest, aes(x=row.names(swtest), y=as.numeric(swtest$V2))) +
geom_point()
shapiro.test(runoff$Qlog)
# Density of logarithmic runoff (per doy)
plt_runoffobs <- ggplot(runoff, aes(x=doy,y=Qlog)) +
geom_bin2d(binwidth=c(10,0.1)) +
labs(x="Day of year", y="Log Q [m³/s]", title="Observed runoff Mkomazi (U1H005)") +
ylim(-2,3) +
theme_bw()
plot(plt_runoffobs)
png(filename = "runoff_obs.png", units="cm", width=15, height=7, res=300)
plot(plt_runoffobs)
dev.off()
png(filename = "runoff_obs.png", units="cm", width=12, height=8, res=300)
plot(plt_runoffobs)
dev.off()
png(filename = "runoff_obs.png", units="cm", width=14, height=8, res=300)
plot(plt_runoffobs)
dev.off()
ggplot(runoff_pred, aes(x=doy,y=Qlog)) +
geom_bin2d(binwidth=c(10,0.1)) +
labs(x="Day of year", y="Log Q [m³/s]", title="Simulated runoff Mkomazi (U1H005)")+
ylim(-2,3)+
theme_bw()
plt_runoffpred <- ggplot(runoff_pred, aes(x=doy,y=Qlog)) +
geom_bin2d(binwidth=c(10,0.1)) +
labs(x="Day of year", y="Log Q [m³/s]", title="Simulated runoff Mkomazi (U1H005)")+
ylim(-2,3)+
theme_bw()
plot(plt_runoffpred)
png(filename = "runoff_pred.png", units="cm", width=14, height=8, res=300)
plot(plt_runoffpred)
dev.off()
#ggplot(runoff, aes(Q))+
ggplot(subset(runoff, doy %in% c(1, 183)), aes(Q, group=doy, colour=factor(doy), fill=factor(doy)))+
geom_density(aes(Q, group=doy, colour=factor(doy), fill=factor(doy)),adjust=3, alpha=0.5) +
geom_rug()+
scale_x_log10(limits=c(1,1000))+
#scale_x_continuous(trans='log10')+
scale_fill_discrete(name="Day of year",
breaks=c(1,183),
labels=c("Jan 1st", "Jul 1st")) +
scale_colour_discrete(name="Day of year",
breaks=c(1,183),
labels=c("Jan 1st", "Jul 1st")) +
labs(title="Runoff density for selected days", x="Q [m³/s]", caption="n=20589 obs.") +
theme_bw()
#ggplot(runoff, aes(Q))+
ggplot(subset(runoff, doy %in% c(1, 183)), aes(Q, group=doy, colour=factor(doy), fill=factor(doy)))+
geom_density(aes(Q, group=doy, colour=factor(doy), fill=factor(doy)),adjust=3, alpha=0.5) +
geom_rug()+
scale_x_log10(limits=c(1,1000))+
#scale_x_continuous(trans='log10')+
scale_fill_discrete(name="Day of year",
breaks=c(1,183),
labels=c("Jan 1st", "Jul 1st")) +
scale_colour_discrete(name="Day of year",
breaks=c(1,183),
labels=c("Jan 1st", "Jul 1st")) +
labs(title="Runoff density for selected days", x="Q [m³/s]", caption="n=20589 obs.") +
theme_bw()
ggplot(subset(runoff, doy %in% c(1, 183)), aes(Q, group=doy, colour=factor(doy), fill=factor(doy)))+
geom_density(aes(Q, group=doy, colour=factor(doy), fill=factor(doy)),adjust=3, alpha=0.5) +
geom_rug()+
scale_x_log10(limits=c(1,1000))+
#scale_x_continuous(trans='log10')+
scale_fill_discrete(name="Day of year",
breaks=c(1,183),
labels=c("Jan 1st", "Jul 1st")) +
scale_colour_discrete(name="Day of year",
breaks=c(1,183),
labels=c("Jan 1st", "Jul 1st")) +
labs(title="Runoff density for selected days", x="Q [m³/s]", caption="n=20589 obs.") +
theme_bw()
ggplot(subset(runoff, doy %in% c(1, 183)), aes(Q, group=doy, colour=factor(doy), fill=factor(doy)))+
geom_density(aes(Q, group=doy, colour=factor(doy), fill=factor(doy)),adjust=3, alpha=0.5) +
geom_rug()+
scale_x_log10(limits=c(1,1000))+
#scale_x_continuous(trans='log10')+
scale_fill_discrete(name="Day of year",
breaks=c(1,183),
labels=c("Jan 1st", "Jul 1st")) +
scale_colour_discrete(name="Day of year",
breaks=c(1,183),
labels=c("Jan 1st", "Jul 1st")) +
labs(title="Runoff density for selected days", x="Q [m³/s]", caption="n=59 obs.") +
theme_bw()
png(filename = "runoff_doys.png", units="cm", width=12, height=7, res=300)
plot(plt_doys)
plt_doys <- ggplot(subset(runoff, doy %in% c(1, 183)), aes(Q, group=doy, colour=factor(doy), fill=factor(doy)))+
geom_density(aes(Q, group=doy, colour=factor(doy), fill=factor(doy)),adjust=3, alpha=0.5) +
geom_rug()+
scale_x_log10(limits=c(1,1000))+
#scale_x_continuous(trans='log10')+
scale_fill_discrete(name="Day of year",
breaks=c(1,183),
labels=c("Jan 1st", "Jul 1st")) +
scale_colour_discrete(name="Day of year",
breaks=c(1,183),
labels=c("Jan 1st", "Jul 1st")) +
labs(title="Runoff density for selected days", x="Q [m³/s]", caption="n=59 obs.") +
theme_bw()
plot(plt_doys)
png(filename = "runoff_doys.png", units="cm", width=12, height=7, res=300)
plot(plt_doys)
dev.off()
plt_doys <- ggplot(subset(runoff, doy %in% c(1, 183)), aes(Q, group=doy, colour=factor(doy), fill=factor(doy)))+
geom_density(aes(Q, group=doy, colour=factor(doy), fill=factor(doy)),adjust=3, alpha=0.5) +
geom_rug()+
scale_x_log10(limits=c(1,1000))+
#scale_x_continuous(trans='log10')+
scale_fill_discrete(name="Day of year",
breaks=c(1,183),
labels=c("Jan 1st", "Jul 1st")) +
scale_colour_discrete(name="Day of year",
breaks=c(1,183),
labels=c("Jan 1st", "Jul 1st")) +
labs(title="Discharge density for selected days", x="Q [m³/s]", caption="n=59 obs.") +
theme_bw()
plot(plt_doys)
png(filename = "runoff_doys.png", units="cm", width=12, height=7, res=300)
plot(plt_doys)
dev.off()
plt_runoffobs <- ggplot(runoff, aes(x=doy,y=Qlog)) +
geom_bin2d(binwidth=c(10,0.1)) +
labs(x="Day of year", y="Log Q [m³/s]", title="Observed discharge Umkomazi (U1H005)") +
ylim(-2,3) +
theme_bw()
plot(plt_runoffobs)
png(filename = "runoff_obs.png", units="cm", width=14, height=8, res=300)
plot(plt_runoffobs)
dev.off()
plt_runoffpred <- ggplot(runoff_pred, aes(x=doy,y=Qlog)) +
geom_bin2d(binwidth=c(10,0.1)) +
labs(x="Day of year", y="Log Q [m³/s]", title="Simulated discharge Umkomazi (U1H005)")+
ylim(-2,3)+
theme_bw()
plot(plt_runoffpred)
png(filename = "runoff_pred.png", units="cm", width=14, height=8, res=300)
plot(plt_runoffpred)
dev.off()
png(filename = "runoff_pred.png", units="cm", width=14, height=7, res=300)
plot(plt_runoffpred)
dev.off()
png(filename = "runoff_obs.png", units="cm", width=14, height=7, res=300)
plot(plt_runoffobs)
dev.off()
library(readr)
library(lubridate)
library(ggplot2)
library(hydrostats)
runoff <- read_table2("../data/U1H005_daily.txt",
col_types = cols(DATE = col_integer()),
skip = 10)
head(runoff, 3)
runoff[is.na(runoff$QUAL),2] <- NA # remove Quality measures that shifted in the Q column
runoff <- ts.format(runoff, format="%Y%m%d", cols=c(1,2)) # set date format
runoff$year <- as.integer(substr(runoff$Date, 1,4)) # derive year
runoff$doy <- as.numeric(strftime(runoff$Date, format = "%j"))  # derive day-of-year
runoff$month <- as.numeric(strftime(runoff$Date, format = "%m"))  # derive day-of-year
runoff <- na.omit(runoff) # delete empty fields
head(runoff, 3)
ggplot(runoff, aes(x=Date, y=Q)) +
ylim(0, 400) +
ylab("Q [m³/s]") +
geom_line(aes(group=1), colour="blue", size=.5) +
facet_wrap(runoff$year, ncol=10, scales="free_x") +
scale_x_datetime(date_breaks = "1 month", minor_breaks=NULL) +
theme_bw() +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(),
strip.text.x = element_text(size = 6))
catchment_area <- 1744 # area in [km²]
runoff_pred$q <- runoff$Q*1000/catchment_area # Q [m³/s] to [l/(km²/s)]
catchment_area <- 1744 # area in [km²]
runoff$q <- runoff$Q*1000/catchment_area # Q [m³/s] to [l/(km²/s)]
catchment_area <- 1744 # area in [km²]
runoff$q <- runoff$Q*1000/catchment_area # Q [m³/s] to [l/(km²/s)]
catchment_area <- 1744 # area in [km²]
runoff$q <- runoff$Q*1000/catchment_area # Q [m³/s] to [l/(m²/s)]
runoff$R <- runoff_pred$q * 86400 / 10^6 # per day
runoff$R <- runoff$q * 86400 / 10^6 # per day
runoff <- runoff[order(runoff_pred$year, runoff_pred$doy),]
runoff <- runoff[order(runoff$year, runoff$doy),]
head(runoff_pred, 6)
head(runoff, 6)
head(runoff, 7)
head(runoff)
catchment_area <- 1744 # area in [km²]
runoff$q <- runoff$Q*1000/catchment_area # Q [m³/s] to [l/(km²/s)]
runoff$R <- runoff$q * 86400 / 10^6 # per day
runoff <- runoff[order(runoff$year, runoff$doy),]
head(runoff)
head(runoff)
head(runoff)
catchment_area <- 1744 # area in [km²]
runoff$q <- runoff$Q*1000/catchment_area # Q [m³/s] to [l/(km²/s)]
runoff$q_sqm <- runoff$q/10000
head(runoff)
head(runoff_pred, 6)
d <- read.csv("../data/soil_profile.csv", sep=";")
library(soiltexture)
# Calculate Silt and Sand Fractions, all columns must be capitals
x <- d
x$SILT <- d$csilt + d$fsilt
x$SAND <- d$csand + d$msand + d$fsand + d$vfsand
x$CLAY <- d$clay
x <- TT.normalise.sum(tri.data=x)
geo <- TT.plot(tri.data=x,
class.sys = "USDA.TT",
#class.p.bg.col = TRUE,
text.sum = 100,
main="USDA",
col="#A51E37",
#arrows.show = F,
pch=15,
)
TT.text(tri.data = x,
geo=geo,
#labels = c("L1", "L2", "L3", "L4"),
labels = seq(1,nrow(d)),
cex=1,
font=2,
col="#A51E37",
#adj=1,
offset=0.5,
pos=2)
rm(x)
erodibility <- function(clay, vfsand, om, sand){
if(sand >= 30){
erodibility <- 0.00197+0.00030*vfsand+0.038633*exp(-1.84*om)
}else if(sand < 30){
erodibility <- 0.0069+0.134*exp(-20*clay)
}
}
d$Kr <- erodibility(vfsand=d$vfsand, om=d$som, clay=d$clay, sand=sum(d$csand, d$msand, d$fsand, d$vfsand))
print(d$Kr)
mean_particle_diameter <- function(clay=0, silt=0, sand=0, csilt=0, fsilt=0, csand=0, msand=0, fsand=0, vfsand=0, method="geometric", classification="USDA"){
if(classification=="USDA"){
gsize <- c(mean(c(0, 0.002)),    # Clay
mean(c(0.002, 0.05)), # Silt
mean(c(0.05, 2)),   # Sand
mean(c(0.05, 0.02)),  # Coarse silt
mean(c(0.02, 0.002)), # Fine silt
mean(c(2, 0.5)),      # Coarse sand
mean(c(0.5, 0.25)),   # Medium sand
mean(c(0.25, 0.1)),   # Fine sand
mean(c(0.1, 0.05)))   # Very fine sand
}
if(method=="geometric"){
mean_diameter <- exp(0.01 * (
clay * log(gsize[1]) +
silt * log(gsize[2]) +
sand * log(gsize[3]) +
csilt * log(gsize[4]) +
fsilt * log(gsize[5]) +
csand * log(gsize[6]) +
msand * log(gsize[7]) +
fsand * log(gsize[8]) +
vfsand * log(gsize[9])
))
}
return(mean_diameter/1000) # from mm to m
}
d$Dg <- mean_particle_diameter(d$clay, d$csilt, d$fsilt, d$csand, d$msand, d$fsand, d$vfsand, method="geometric", classification="USDA")
print(d$Dg)
shear_stress <- function(clay){
shear_stress <- 3.11*10^(0.0182*clay) # in Pa (Pascal)
}
d$tau <- shear_stress(d$clay)
print(d$tau)
shear_stress <- function(clay, vfsand){
shear_stress <- 2.67 + 0.065 * clay - 0.058 * vfsand
}
d$tau <- shear_stress(d$clay, d$vfsand)
print(d$tau)
v_crit <- function(m1=1,     # 1=clear water,...,1.4=colloidal suspended load > 0.1 kg/m3
n1=4,     # Turbulence: 4
ps,       # Density of soil kg/m3
p=1000,   # Density of water: ~1000 kg/m3
g=9.81,   # Newton/kg
d,        # mean particle size diameter (m)
K0=1,     # Soil mechanical coefficent: 0.5 (Maerker 2002) or 1 (Sidorchuk 2019)
Cnf       # Soil shear strength (Pa)
){
# Critical velocity of bed erosion initiation (after 1pers. comm. Sidorchuck 2019)
v_crit <- 1.25 * sqrt(
(2*m1/1.54*p*n1)*
((ps-p)*g*d + 1.25*Cnf*K0)
)
return(v_crit)
}
d$v_crit <- v_crit(ps=1200, d=d$Dg, Cnf=d$tau)
print(d$v_crit)
s_crit <- function(slope, unit="degrees"){
if(unit=="degrees"){
s_crit <- slope*pi/180
}else if(unit=="percent"){
s_crit <- atan(slope/100)
}
}
# Since all layers have the same slope in this example, we can assign the same value. Otherwise get the value from the table.
d$s_crit <- s_crit(57, "degrees")
print(d$s_crit)
layer_export <- function(years, lnumber=1, v_crit, s_crit, Kr, Qdat="S_150.txt"){
for (i in seq(1,lnumber)){
filename <- paste("../output/PARAM", toString(i), ".txt", sep="")
Layer <- file(filename, open="w")
lines <- c("0\t0",
i,              # Number of layer
v_crit[i],      # Critical Velocity
"0",            # Index of texture layer (unused)
s_crit[i],      # Stable slope
Kr[i],          # Erodibility coefficent
"S_150.txt",
years,
seq(1, years, 1))
writeLines(lines, con=Layer)
close(Layer)
rm(i, filename, Layer, lines)
}}
# Apply
layer_export(years=59, lnumber=nrow(d), v_crit=d$v_crit, s_crit=d$s_crit, Kr=d$Kr)
head(runoff)
catchment_area <- 1744 # area in [km²]
runoff$q <- runoff$Q*1000/catchment_area # Q [m³/s] to [l/(km²/s)]
head(runoff)
runoff$R <- runoff$q * 86400 / 10^6 # per day
runoff <- runoff[order(runoff$year, runoff$doy),]
head(runoff)
# Export q in [l/(km²s)]
out <- runoff_pred[,c("year", "q")]
# Export q in [l/(km²s)]
out <- runoff[,c("year", "q")]
out$q <- out$q/1000000 # [l/(km²s)] to [l/(m²s)]
out$q <- format(out$q, scientific = FALSE) # change to decimals
write.table(out, "../output/S_150_obs_l/m2/s.txt", sep="\t", row.names=F, col.names=F, quote=F)
# Export q in [l/(km²s)]
out <- runoff[,c("year", "q")]
out$q <- out$q/1000000 # [l/(km²s)] to [l/(m²s)]
out$q <- format(out$q, scientific = FALSE) # change to decimals
write.table(out, "../output/S_150_obs_l/m2/s.txt", sep="\t", row.names=F, col.names=F, quote=F)
write.table(out, "../output/S_150_obs_l/m2/s.txt", sep="\t", row.names=F, col.names=F, quote=F)
# Export q in [l/(km²s)]
out <- runoff[,c("year", "q")]
out$q <- out$q/1000000 # [l/(km²s)] to [l/(m²s)]
out$q <- format(out$q, scientific = FALSE) # change to decimals
write.table(out, "../output/S_150_obs_l/m2/s.txt", sep="\t", row.names=F, col.names=F, quote=F)
