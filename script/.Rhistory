names(runoff_pred) <- c('year','doy','Qlog')
# Filter gap years
runoff_pred <- runoff_pred[!(runoff_pred$doy==366 & leap_year(runoff_pred$year)==TRUE),]
ggplot(runoff_pred, aes(x=doy,y=Qlog)) +
geom_bin2d(binwidth=c(10,0.1)) +
labs(x="Day of year", y="Log Q [m³/s]", title="Simulated runoff Mkomazi (U1H005)")+
ylim(-2,3)+
theme_bw()
runoff_pred$Q <- 10^runoff_pred$Qlog
catchment_area <- 1744 # area in [km²]
runoff_pred$q <- runoff_pred$Q/catchment_area
runoff_pred$h <- runoff_pred$q * 86400 / 10^6 # per day
runoff_pred <- runoff_pred[order(runoff_pred$year, runoff_pred$doy),]
head(runoff_pred, 6)
View(runoff)
runoff_pred$R <- runoff_pred$q * 86400 / 10^6 # per day
runoff_pred <- runoff_pred[order(runoff_pred$year, runoff_pred$doy),]
head(runoff_pred, 6)
# Export q in [l/(m²s)]
out <- runoff_pred[,c("year", "q")]
out$q <- format(out$q, scientific = FALSE) # change to decimals
write.table(out, "../output/S_150_lts_q.txt", sep="\t", row.names=F, col.names=F, quote=F)
# Export h in [mm]
out <- runoff_pred[,c("year", "R")]
out$R <- format(out$R, scientific = FALSE) # change to decimals
write.table(out, "../output/S_150_lts_R.txt", sep="\t", row.names=F, col.names=F, quote=F)
mean(runoff_pred$h)*365
catchment_area <- 1744 # area in [km²]
runoff_pred$q <- runoff_pred$Q*1000/catchment_area # Q in [l/s]
runoff_pred$R <- runoff_pred$q * 86400 / 10^6 # per day
runoff_pred <- runoff_pred[order(runoff_pred$year, runoff_pred$doy),]
head(runoff_pred, 6)
runoff_pred <- runoff_pred[order(runoff_pred$year, runoff_pred$doy),]
runoff_pred <- runoff_pred[order(runoff_pred$year, runoff_pred$doy),]
runoff_pred <- runoff_pred[order(runoff_pred$year, runoff_pred$doy),]
library(readr)
library(lubridate)
library(ggplot2)
library(hydrostats)
runoff <- read_table2("../data/U1H005_daily.txt",
col_types = cols(DATE = col_integer()),
skip = 10)
head(runoff, 3)
runoff[is.na(runoff$QUAL),2] <- NA # remove Quality measures that shifted in the Q column
runoff <- ts.format(runoff, format="%Y%m%d", cols=c(1,2)) # set date format
runoff$year <- as.integer(substr(runoff$Date, 1,4)) # derive year
runoff$doy <- as.numeric(strftime(runoff$Date, format = "%j"))  # derive day-of-year
runoff <- na.omit(runoff) # delete empty fields
head(runoff, 3)
ggplot(runoff, aes(x=Date, y=Q)) +
ylim(0, 400) +
ylab("Q [m³/s]") +
geom_line(aes(group=1), colour="blue", size=.5) +
facet_wrap(runoff$year, ncol=10, scales="free_x") +
scale_x_datetime(date_breaks = "1 month", minor_breaks=NULL) +
theme_bw() +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(),
strip.text.x = element_text(size = 6))
runoff$Qlog <- log10(runoff$Q)  # calculate Log base 10 of runoff
runoff <- runoff[!(runoff$Qlog=='-Inf'),] # delete -Inf
head(runoff,3)
# Density of logarithmic runoff (per doy)
ggplot(runoff, aes(x=doy,y=Qlog)) +
geom_bin2d(binwidth=c(10,0.1)) +
labs(x="Day of year", y="Log Q [m³/s]", title="Observed runoff Mkomazi (U1H005)") +
ylim(-2,3) +
theme_bw()
#ggplot(runoff, aes(Q))+
ggplot(subset(runoff, doy %in% c(1, 183)), aes(Q, group=doy, colour=factor(doy), fill=factor(doy)))+
geom_density(aes(Q, group=doy, colour=factor(doy), fill=factor(doy)),adjust=3, alpha=0.5) +
geom_rug()+
scale_x_log10(limits=c(1,1000))+
#scale_x_continuous(trans='log10')+
scale_fill_discrete(name="Day of year",
breaks=c(1,183),
labels=c("Jan 1st", "Jul 1st")) +
scale_colour_discrete(name="Day of year",
breaks=c(1,183),
labels=c("Jan 1st", "Jul 1st")) +
labs(title="Runoff density for selected days", x="Q [m³/s]", caption="n=59 years") +
theme_bw()
#Create empty data frame
runoff_aggregates <- data.frame()
#aggregate mean runoff per day
runoff_aggregates <- aggregate(runoff, by=list(runoff$doy), FUN=mean)[,c('doy','Qlog')]
#aggregate mean runoff per day
runoff_aggregates$sd <- aggregate(runoff, list(runoff$doy), FUN=sd)[,c('Qlog')]
names(runoff_aggregates) <- c('doy','mean','sd')
set.seed(2020)
# Manual input of desired time span
start_year <- 1500
end_year <- 2018
number_of_years <- end_year-start_year
runoff_pred <- data.frame()
# Simulation
for(i in runoff_aggregates$doy){
x <- rnorm(number_of_years, mean=runoff_aggregates$mean[i], sd=runoff_aggregates$sd[i])
pred <- data.frame(cbind(seq(start_year,end_year,1), # year
rep(i, number_of_years),      # doy
x))                           # predicted values
runoff_pred <- rbind(runoff_pred, pred)
}
names(runoff_pred) <- c('year','doy','Qlog')
# Filter gap years
runoff_pred <- runoff_pred[!(runoff_pred$doy==366 & leap_year(runoff_pred$year)==TRUE),]
ggplot(runoff_pred, aes(x=doy,y=Qlog)) +
geom_bin2d(binwidth=c(10,0.1)) +
labs(x="Day of year", y="Log Q [m³/s]", title="Simulated runoff Mkomazi (U1H005)")+
ylim(-2,3)+
theme_bw()
runoff_pred$Q <- 10^runoff_pred$Qlog
catchment_area <- 1744 # area in [km²]
runoff_pred$q <- runoff_pred$Q*1000/catchment_area # Q in [l/s]
runoff_pred$R <- runoff_pred$q * 86400 / 10^6 # per day
runoff_pred <- runoff_pred[order(runoff_pred$year, runoff_pred$doy),]
head(runoff_pred, 6)
head(runoff_pred, 6)
runoff_pred <- runoff_pred[order(runoff_pred$year, runoff_pred$doy),]
head(runoff_pred, 6)
# Export q in [l/(m²s)]
out <- runoff_pred[,c("year", "q")]
out$q <- format(out$q, scientific = FALSE) # change to decimals
write.table(out, "../output/S_150_lts_q.txt", sep="\t", row.names=F, col.names=F, quote=F)
# Export h in [mm]
out <- runoff_pred[,c("year", "R")]
out$R <- format(out$R, scientific = FALSE) # change to decimals
write.table(out, "../output/S_150_lts_R.txt", sep="\t", row.names=F, col.names=F, quote=F)
mean(runoff_pred$R)
mean(runoff_pred$R)*365
library(readr)
library(lubridate)
library(ggplot2)
library(hydrostats)
runoff <- read_table2("../data/U1H005_daily.txt",
col_types = cols(DATE = col_integer()),
skip = 10)
head(runoff, 3)
runoff[is.na(runoff$QUAL),2] <- NA # remove Quality measures that shifted in the Q column
runoff <- ts.format(runoff, format="%Y%m%d", cols=c(1,2)) # set date format
runoff$year <- as.integer(substr(runoff$Date, 1,4)) # derive year
runoff$doy <- as.numeric(strftime(runoff$Date, format = "%j"))  # derive day-of-year
runoff <- na.omit(runoff) # delete empty fields
head(runoff, 3)
ggplot(runoff, aes(x=Date, y=Q)) +
ylim(0, 400) +
ylab("Q [m³/s]") +
geom_line(aes(group=1), colour="blue", size=.5) +
facet_wrap(runoff$year, ncol=10, scales="free_x") +
scale_x_datetime(date_breaks = "1 month", minor_breaks=NULL) +
theme_bw() +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(),
strip.text.x = element_text(size = 6))
runoff$Qlog <- log10(runoff$Q)  # calculate Log base 10 of runoff
runoff <- runoff[!(runoff$Qlog=='-Inf'),] # delete -Inf
head(runoff,3)
# Density of logarithmic runoff (per doy)
ggplot(runoff, aes(x=doy,y=Qlog)) +
geom_bin2d(binwidth=c(10,0.1)) +
labs(x="Day of year", y="Log Q [m³/s]", title="Observed runoff Mkomazi (U1H005)") +
ylim(-2,3) +
theme_bw()
#ggplot(runoff, aes(Q))+
ggplot(subset(runoff, doy %in% c(1, 183)), aes(Q, group=doy, colour=factor(doy), fill=factor(doy)))+
geom_density(aes(Q, group=doy, colour=factor(doy), fill=factor(doy)),adjust=3, alpha=0.5) +
geom_rug()+
scale_x_log10(limits=c(1,1000))+
#scale_x_continuous(trans='log10')+
scale_fill_discrete(name="Day of year",
breaks=c(1,183),
labels=c("Jan 1st", "Jul 1st")) +
scale_colour_discrete(name="Day of year",
breaks=c(1,183),
labels=c("Jan 1st", "Jul 1st")) +
labs(title="Runoff density for selected days", x="Q [m³/s]", caption="n=59 years") +
theme_bw()
#Create empty data frame
runoff_aggregates <- data.frame()
#aggregate mean runoff per day
runoff_aggregates <- aggregate(runoff, by=list(runoff$doy), FUN=mean)[,c('doy','Qlog')]
#aggregate mean runoff per day
runoff_aggregates$sd <- aggregate(runoff, list(runoff$doy), FUN=sd)[,c('Qlog')]
names(runoff_aggregates) <- c('doy','mean','sd')
set.seed(2020)
# Manual input of desired time span
start_year <- 1500
end_year <- 2018
number_of_years <- end_year-start_year
runoff_pred <- data.frame()
# Simulation
for(i in runoff_aggregates$doy){
x <- rnorm(number_of_years, mean=runoff_aggregates$mean[i], sd=runoff_aggregates$sd[i])
pred <- data.frame(cbind(seq(start_year,end_year,1), # year
rep(i, number_of_years),      # doy
x))                           # predicted values
runoff_pred <- rbind(runoff_pred, pred)
}
names(runoff_pred) <- c('year','doy','Qlog')
# Filter gap years
runoff_pred <- runoff_pred[!(runoff_pred$doy==366 & leap_year(runoff_pred$year)==TRUE),]
ggplot(runoff_pred, aes(x=doy,y=Qlog)) +
geom_bin2d(binwidth=c(10,0.1)) +
labs(x="Day of year", y="Log Q [m³/s]", title="Simulated runoff Mkomazi (U1H005)")+
ylim(-2,3)+
theme_bw()
runoff_pred$Q <- 10^runoff_pred$Qlog
catchment_area <- 1744 # area in [km²]
runoff_pred$q <- runoff_pred$Q*1000/catchment_area # Q [m³/s] to [l/s]
runoff_pred$R <- runoff_pred$q * 86400 / 10^6 # per day
runoff_pred <- runoff_pred[order(runoff_pred$year, runoff_pred$doy),]
head(runoff_pred, 6)
# Export q in [l/(km²s)]
out <- runoff_pred[,c("year", "q")]
out$q <- format(out$q*10^-6, scientific = FALSE) # change to decimals
write.table(out, "../output/S_150_lts_q.txt", sep="\t", row.names=F, col.names=F, quote=F)
# Export h in [mm/d]
out <- runoff_pred[,c("year", "R")]
out$R <- format(out$R, scientific = FALSE) # change to decimals
write.table(out, "../output/S_150_lts_R.txt", sep="\t", row.names=F, col.names=F, quote=F)
library(readr)
library(lubridate)
library(ggplot2)
library(hydrostats)
runoff <- read_table2("../data/U1H005_daily.txt",
col_types = cols(DATE = col_integer()),
skip = 10)
head(runoff, 3)
runoff[is.na(runoff$QUAL),2] <- NA # remove Quality measures that shifted in the Q column
runoff <- ts.format(runoff, format="%Y%m%d", cols=c(1,2)) # set date format
runoff$year <- as.integer(substr(runoff$Date, 1,4)) # derive year
runoff$doy <- as.numeric(strftime(runoff$Date, format = "%j"))  # derive day-of-year
runoff <- na.omit(runoff) # delete empty fields
head(runoff, 3)
ggplot(runoff, aes(x=Date, y=Q)) +
ylim(0, 400) +
ylab("Q [m³/s]") +
geom_line(aes(group=1), colour="blue", size=.5) +
facet_wrap(runoff$year, ncol=10, scales="free_x") +
scale_x_datetime(date_breaks = "1 month", minor_breaks=NULL) +
theme_bw() +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(),
strip.text.x = element_text(size = 6))
runoff$Qlog <- log10(runoff$Q)  # calculate Log base 10 of runoff
runoff <- runoff[!(runoff$Qlog=='-Inf'),] # delete -Inf
head(runoff,3)
# Density of logarithmic runoff (per doy)
ggplot(runoff, aes(x=doy,y=Qlog)) +
geom_bin2d(binwidth=c(10,0.1)) +
labs(x="Day of year", y="Log Q [m³/s]", title="Observed runoff Mkomazi (U1H005)") +
ylim(-2,3) +
theme_bw()
#ggplot(runoff, aes(Q))+
ggplot(subset(runoff, doy %in% c(1, 183)), aes(Q, group=doy, colour=factor(doy), fill=factor(doy)))+
geom_density(aes(Q, group=doy, colour=factor(doy), fill=factor(doy)),adjust=3, alpha=0.5) +
geom_rug()+
scale_x_log10(limits=c(1,1000))+
#scale_x_continuous(trans='log10')+
scale_fill_discrete(name="Day of year",
breaks=c(1,183),
labels=c("Jan 1st", "Jul 1st")) +
scale_colour_discrete(name="Day of year",
breaks=c(1,183),
labels=c("Jan 1st", "Jul 1st")) +
labs(title="Runoff density for selected days", x="Q [m³/s]", caption="n=59 years") +
theme_bw()
#Create empty data frame
runoff_aggregates <- data.frame()
#aggregate mean runoff per day
runoff_aggregates <- aggregate(runoff, by=list(runoff$doy), FUN=mean)[,c('doy','Qlog')]
#aggregate mean runoff per day
runoff_aggregates$sd <- aggregate(runoff, list(runoff$doy), FUN=sd)[,c('Qlog')]
names(runoff_aggregates) <- c('doy','mean','sd')
set.seed(2020)
# Manual input of desired time span
start_year <- 1500
end_year <- 2018
number_of_years <- end_year-start_year
runoff_pred <- data.frame()
# Simulation
for(i in runoff_aggregates$doy){
x <- rnorm(number_of_years, mean=runoff_aggregates$mean[i], sd=runoff_aggregates$sd[i])
pred <- data.frame(cbind(seq(start_year,end_year,1), # year
rep(i, number_of_years),      # doy
x))                           # predicted values
runoff_pred <- rbind(runoff_pred, pred)
}
names(runoff_pred) <- c('year','doy','Qlog')
# Filter gap years
runoff_pred <- runoff_pred[!(runoff_pred$doy==366 & leap_year(runoff_pred$year)==TRUE),]
ggplot(runoff_pred, aes(x=doy,y=Qlog)) +
geom_bin2d(binwidth=c(10,0.1)) +
labs(x="Day of year", y="Log Q [m³/s]", title="Simulated runoff Mkomazi (U1H005)")+
ylim(-2,3)+
theme_bw()
runoff_pred$Q <- 10^runoff_pred$Qlog
catchment_area <- 1744 # area in [km²]
runoff_pred$q <- runoff_pred$Q*1000/catchment_area # Q [m³/s] to [l/s]
runoff_pred$R <- runoff_pred$q * 86400 / 10^6 # per day
runoff_pred <- runoff_pred[order(runoff_pred$year, runoff_pred$doy),]
# Export q in [l/(km²s)]
out <- runoff_pred[,c("year", "q")]
out$q <- format(out$q/1000000, scientific = FALSE) # change to decimals
write.table(out, "../output/S_150_lts_q.txt", sep="\t", row.names=F, col.names=F, quote=F)
# Export h in [mm/d]
out <- runoff_pred[,c("year", "R")]
out$R <- format(out$R, scientific = FALSE) # change to decimals
write.table(out, "../output/S_150_lts_R.txt", sep="\t", row.names=F, col.names=F, quote=F)
shapiro.test(runoff$Qlog)
shapiro.test(runoff$Qlog[runoff$doy==1])
shapiro.test(runoff$Qlog[runoff$doy==2])
shapiro.test(runoff$Qlog[runoff$doy==3])
shapiro.test(runoff$Qlog[runoff$doy==4])
for(i in unique(runoff$doy))
print(mean(runoff$Qlog[runoff$doy==i]))
for(i in unique(runoff$doy))
print(shapiro.test(runoff$Qlog[runoff$doy==i]))
shapiro.test(runoff$Qlog[runoff$doy==360])
shapiro.test(runoff$Qlog[runoff$doy==350])
shapiro.test(runoff$Qlog[runoff$doy==150])
shapiro.test(runoff$Qlog[runoff$doy==290])
shapiro.test(runoff$Qlog[runoff$doy==300])
shapiro.test(runoff$Qlog[runoff$doy==300])[1]
shapiro.test(runoff$Qlog[runoff$doy==300])[2]
shapiro.test(runoff$Qlog[runoff$doy==300])[statistic]
shapiro.test(runoff$Qlog[runoff$doy==300])[3]
shapiro.test(runoff$Qlog[runoff$doy==300])[4]
shapiro.test(runoff$Qlog[runoff$doy==300])[5]
shapiro.test(runoff$Qlog[runoff$doy==300])[6]
shapiro.test(runoff$Qlog[runoff$doy==300])[1]
shapiro.test(runoff$Qlog[runoff$doy==300])[2]
shapiro.test(runoff$Qlog[runoff$doy==300])[2]
for(i in unique(runoff$doy)){
if(shapiro.test(runoff$Qlog[runoff$doy==i])$p.value <= 0.5){
print(i)
}
}
for(i in unique(runoff$doy)){
if(shapiro.test(runoff$Qlog[runoff$doy==i])$p.value <= 0.05){
print(i)
}
}
for(i in unique(runoff$doy)){
if(shapiro.test(runoff$Qlog[runoff$doy==i])$p.value <= 0.05){
print(shapiro.test(runoff$Qlog[runoff$doy==i)
for(i in unique(runoff$doy)){
if(shapiro.test(runoff$Qlog[runoff$doy==i])$p.value <= 0.05){
print(shapiro.test(runoff$Qlog[runoff$doy==i))
for(i in unique(runoff$doy)){
if(shapiro.test(runoff$Qlog[runoff$doy==i])$p.value <= 0.05){
print(i)
}
}
for(i in unique(runoff$doy)){
if(shapiro.test(runoff$Qlog[runoff$doy==i])$p.value <= 0.01){
print(i)
}
}
shapiro.test(runoff$Qlog[runoff$doy==17])$p.value
runoff$Qlog[runoff$doy==17]
ggplot(aes(x=shapiro.test(runoff$Qlog[runoff$doy==i)) + geom_density()
ggplot(aes(x=shapiro.test(runoff$Qlog[runoff$doy==i)) + geom_density()
ggplot(aes(x=shapiro.test(runoff$Qlog[runoff$doy==i))) + geom_density()
ggplot(aes(x=shapiro.test(runoff$Qlog[runoff$doy==i]) + geom_density()
ggplot(aes(x=shapiro.test(runoff$Qlog[runoff$doy==i])) + geom_density()
ggplot(aes(x=shapiro.test(runoff$Qlog[runoff$doy==i])) + geom_density()
as
ds
fs
ggplot(aes(x=shapiro.test(runoff$Qlog[runoff$doy==i]))) + geom_density()
ggplot(data=runoff, aes(x=shapiro.test(runoff$Qlog[runoff$doy==i]))) + geom_density()
ggplot(data=runoff[runoff$doy==17]), aes(x=Qlog)) + geom_density()
ggplot(data=runoff[runoff$doy==17], aes(x=Qlog)) + geom_density()
ggplot(data=runoff[runoff$doy==17], aes(x=Qlog[runoff$doy==17])) + geom_density()
ggplot(data=runoff[runoff$doy==17], aes(x=runoff$Qlog[runoff$doy==17])) + geom_density()
ggplot(data=runoff[runoff$doy==17], aes(y=runoff$Qlog[runoff$doy==17])) + geom_density()
for(i in unique(runoff$doy)){
if(shapiro.test(runoff$Qlog[runoff$doy==i])$p.value <= 0.1){
print(i)
}
}
for(i in unique(runoff$doy)){
if(shapiro.test(runoff$Qlog[runoff$doy==i])$p.value <= 0.1){
print(i, shapiro.test(runoff$Qlog[runoff$doy==i])$p.value)
}
}
for(i in unique(runoff$doy)){
if(shapiro.test(runoff$Qlog[runoff$doy==i])$p.value <= 0.1){
print(shapiro.test(runoff$Qlog[runoff$doy==i])$p.value)
}
}
for(i in unique(runoff$doy)){
if(shapiro.test(runoff$Qlog[runoff$doy==i])$p.value <= 0.01){
print(shapiro.test(runoff$Qlog[runoff$doy==i])$p.value)
}
}
knit_with_parameters('C:/data/git/dyngul-input/script/soil_parameter_preparation.Rmd')
print(d$tau)
d <- read.csv("../data/soil_profile.csv", sep=";")
head(d)
library(soiltexture)
# Calculate Silt and Sand Fractions, all columns must be capitals
x <- d
x$SILT <- d$csilt + d$fsilt
x$SAND <- d$csand + d$msand + d$fsand + d$vfsand
x$CLAY <- d$clay
x <- TT.normalise.sum(tri.data=x)
geo <- TT.plot(tri.data=x,
class.sys = "USDA.TT",
#class.p.bg.col = TRUE,
text.sum = 100,
main="USDA",
col="#A51E37",
#arrows.show = F,
pch=15,
)
TT.text(tri.data = x,
geo=geo,
#labels = c("L1", "L2", "L3", "L4"),
labels = seq(1,nrow(d)),
cex=1,
font=2,
col="#A51E37",
#adj=1,
offset=0.5,
pos=2)
rm(x)
erodibility <- function(vfsand, om){
0.00197+0.00030*vfsand+0.038633*exp(-1.84*om)
}
d$Kr <- erodibility(d$vfsand, d$som)
mean_particle_diameter <- function(clay=0, silt=0, sand=0, csilt=0, fsilt=0, csand=0, msand=0, fsand=0, vfsand=0, method="geometric", classification="USDA"){
if(classification=="USDA"){
gsize <- c(mean(c(0, 0.002)),    # Clay
mean(c(0.002, 0.05)), # Silt
mean(c(0.05, 2)),   # Sand
mean(c(0.05, 0.02)),  # Coarse silt
mean(c(0.02, 0.002)), # Fine silt
mean(c(2, 0.5)),      # Coarse sand
mean(c(0.5, 0.25)),   # Medium sand
mean(c(0.25, 0.1)),   # Fine sand
mean(c(0.1, 0.05)))   # Very fine sand
}
if(method=="geometric"){
mean_diameter <- exp(0.01 * (
clay * log(gsize[1]) +
silt * log(gsize[2]) +
sand * log(gsize[3]) +
csilt * log(gsize[4]) +
fsilt * log(gsize[5]) +
csand * log(gsize[6]) +
msand * log(gsize[7]) +
fsand * log(gsize[8]) +
vfsand * log(gsize[9])
))
}
return(mean_diameter/1000) # from mm to m
}
d$Dg <- mean_particle_diameter(d$clay, d$csilt, d$fsilt, d$csand, d$msand, d$fsand, d$vfsand, method="geometric", classification="USDA")
shear_stress <- function(clay){
shear_stress <- 3.11*10^(0.0182*clay) # in Pa (Pascal)
}
d$tau <- shear_stress(d$clay)
shear_stress <- function(clay, vfsand){
shear_stress <- 2.67 + 0.065 * clay - 0.058 * vfsand
}
d$tau <- shear_stress(d$clay, d$vfsand)
print(d$tau)
print(d$tau)
shear_stress <- function(clay){
shear_stress <- 3.11*10^(0.0182*clay) # in Pa (Pascal)
}
d$tau <- shear_stress(d$clay)
print(d$tau)
print(ds_crit)
print(d$s_crit)
s_crit <- function(slope, unit="degrees"){
if(unit=="degrees"){
s_crit <- slope*pi/180
}else if(unit=="percent"){
s_crit <- atan(slope/100)
}
}
# Since all layers have the same slope in this example, we can assign the same value. Otherwise get the value from the table.
d$s_crit <- s_crit(57, "degrees")
v_crit <- function(m1=1,     # 1=clear water,...,1.4=colloidal suspended load > 0.1 kg/m3
n1=4,     # Turbulence: 4
ps,       # Density of soil kg/m3
p=1000,   # Density of water: ~1000 kg/m3
g=9.81,   # Newton/kg
d,        # mean particle size diameter (m)
K0=1,     # Soil mechanical coefficent: 0.5 (Maerker 2002) or 1 (Sidorchuk 2019)
Cnf       # Soil shear strength (Pa)
){
# Critical velocity of bed erosion initiation (after 1pers. comm. Sidorchuck 2019)
v_crit <- 1.25 * sqrt(
(2*m1/1.54*p*n1)*
((ps-p)*g*d + 1.25*Cnf*K0)
)
return(v_crit)
}
d$v_crit <- v_crit(ps=2500, d=d$Dg, Cnf=d$tau)
s_crit <- function(slope, unit="degrees"){
if(unit=="degrees"){
s_crit <- slope*pi/180
}else if(unit=="percent"){
s_crit <- atan(slope/100)
}
}
# Since all layers have the same slope in this example, we can assign the same value. Otherwise get the value from the table.
d$s_crit <- s_crit(57, "degrees")
print(d$s_crit)
print(d$Dg)
print(d$Kr)
